---
name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-rc.*'
      - 'v*.*.*-beta.*'
      - 'v*.*.*-alpha.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false
      draft:
        description: 'Create as draft'
        type: boolean
        default: true

permissions:
  contents: write
  packages: write
  discussions: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
            if echo "$TAG" | grep -Eiq '(alpha|beta|rc)'; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "is_prerelease=${IS_PRERELEASE}" >> "$GITHUB_OUTPUT"


  generate-changelog:
    name: Generate Changelog
    needs: prepare-release
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG="$(git describe --abbrev=0 --tags "$(git rev-list --tags --skip=1 --max-count=1)" 2>/dev/null || true)"
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS="$(git log --pretty=format:'- %s (%h)' --no-merges)"
          else
            COMMITS="$(git log "${PREVIOUS_TAG}..HEAD" --pretty=format:'- %s (%h)' --no-merges)"
          fi
          FEATURES="$(printf '%s\n' "$COMMITS" | grep -i 'feat\|feature' || true)"
          FIXES="$(printf '%s\n' "$COMMITS" | grep -i 'fix\|bug' || true)"
          DOCS="$(printf '%s\n' "$COMMITS" | grep -i 'docs\|documentation' || true)"
          CHORE="$(printf '%s\n' "$COMMITS" | grep -vi 'feat\|feature\|fix\|bug\|docs\|documentation' || true)"

          CHANGELOG="## What's Changed in ${{ needs.prepare-release.outputs.tag }}\n"
          [ -n "$FEATURES" ] && CHANGELOG="${CHANGELOG}\n### üöÄ Features\n${FEATURES}\n"
          [ -n "$FIXES" ] && CHANGELOG="${CHANGELOG}\n### üêõ Bug Fixes\n${FIXES}\n"
          [ -n "$DOCS" ] && CHANGELOG="${CHANGELOG}\n### üìö Documentation\n${DOCS}\n"
          [ -n "$CHORE" ] && CHANGELOG="${CHANGELOG}\n### üß∞ Maintenance\n${CHORE}\n"
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG="${CHANGELOG}\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ needs.prepare-release.outputs.tag }}"
          fi
          {
            echo "changelog<<'EOF'"
            printf '%s\n' "$CHANGELOG"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  create-release:
    name: Create GitHub Release
    needs: [prepare-release, generate-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: Release ${{ needs.prepare-release.outputs.tag }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: ${{ github.event.inputs.draft || true }}
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
          generate_release_notes: true
          make_latest: ${{ needs.prepare-release.outputs.is_prerelease == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
