name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          severity: warning
          
      - name: Check YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_data: |
            extends: default
            rules:
              line-length:
                max: 120
                level: warning

  build-matrix:
    name: Build on ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04]
        include:
          - os: ubuntu-latest
            artifact_name: mujaos-latest
          - os: ubuntu-22.04
            artifact_name: mujaos-22.04
          - os: ubuntu-20.04
            artifact_name: mujaos-20.04
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          
      - name: Build project
        run: |
          # Add your build commands here
          echo "Building mujaos on ${{ matrix.os }}"
          mkdir -p build
          # Example build commands - adjust to your project
          # make build
          # cargo build --release
          # zig build -Doptimize=ReleaseSafe
          
      - name: Run tests
        run: |
          # Add your test commands here
          echo "Running tests"
          # make test
          # cargo test
          # zig build test
          
      - name: Create artifact
        run: |
          mkdir -p artifacts
          tar -czf artifacts/${{ matrix.artifact_name }}.tar.gz build/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/
          retention-days: 30
          if-no-files-found: error

  test-suite:
    name: Test Suite
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run ${{ matrix.test-type }} tests
        run: |
          echo "Running ${{ matrix.test-type }} tests"
          # Add your test commands
          
      - name: Generate test report
        if: always()
        run: |
          echo "Generating test report for ${{ matrix.test-type }}"
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results/

  security-scan:
    name: Security Scanning
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality Analysis
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  notify-status:
    name: Notify Build Status
    needs: [lint, build-matrix, test-suite, security-scan]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build-matrix.result }}" = "success" ] && \
             [ "${{ needs.test-suite.result }}" = "success" ]; then
            echo "✅ Build and tests passed!"
          else
            echo "❌ Build or tests failed!"
            exit 1
          fi
